### Julia modles
using StatsKit, RCall, JellyMe4, DataFrames, RData, CSV, DisplayAs

accdata = load("/Users/joseph.orr/Documents/repositories/vts_expectancy_f22/Rdata/acc_data.Rds");
accdata = dropmissing(accdata, :participant);

acc_id_m1 = fit(MixedModel, @formula(acc ~ 1 + (alt + prevRew + rewCond + rewExpectancy + genderid + basC + bisC)^3 + (1 | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

acc_id_m2 = fit(MixedModel, @formula(acc ~ 1 + (alt + prevRew + rewCond + rewExpectancy + genderid + basC + bisC)^3 + (1 + alt * prevRew * rewCond | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

acc_id_m3 = fit(MixedModel, @formula(acc ~ 1 + (alt + prevRew + rewCond + rewExpectancy + genderid + basC + bisC)^3 + (1 + alt + prevRew + rewCond | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

acc_bis_m1 = fit(MixedModel, @formula(acc ~ 1 + alt * prevRew * rewCond * rewExpectancy * genderid * bisC + (1 | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

acc_bis_m2 = fit(MixedModel, @formula(acc ~ 1 + alt * prevRew * rewCond * rewExpectancy * genderid * bisC + (1 + alt * prevRew * rewCond | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

acc_bis_m3 = fit(MixedModel, @formula(acc ~ 1 + alt * prevRew * rewCond * rewExpectancy * genderid * bisC + (1 + alt + prevRew + rewCond | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

acc_bas_m1 = fit(MixedModel, @formula(acc ~ 1 + alt * prevRew * rewCond * rewExpectancy * genderid * basC + (1 | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

acc_bas_m2 = fit(MixedModel, @formula(acc ~ 1 + alt * prevRew * rewCond * rewExpectancy * genderid * basC + (1 + alt * prevRew * rewCond | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

acc_bas_m3 = fit(MixedModel, @formula(acc ~ 1 + alt * prevRew * rewCond * rewExpectancy * genderid * basC + (1 + alt + prevRew + rewCond | participant)), accdata, Bernoulli(), contrasts = Dict(:alt => EffectsCoding(base = "repeat"), :prevRew => EffectsCoding(base = "hi"), :rewCond => EffectsCoding(base = "Hi"), :rewExpectancy => EffectsCoding(base = "high")))

R"library(readr)"

acc_m1_j = (acc_id_m1, accdata);
@rput acc_m1_j;
R"write_rds(acc_m1_j, 'Rdata/acc_m1.Rds')";

# Save model table to latex
open("acc_model.md", "w") do io
    show(io, MIME("text/markdown"), acc_id_m1)
end